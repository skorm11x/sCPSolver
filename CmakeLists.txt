set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
cmake_minimum_required(VERSION 4.0)
project(scpsolver LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

option(COVERAGE "Enable code coverage flag" ON)

if(COVERAGE AND (CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang"))
    add_compile_options(
      $<$<CONFIG:Debug>:-fprofile-instr-generate>
      $<$<CONFIG:Debug>:-fcoverage-mapping>
      $<$<CONFIG:Debug>:-O0>
    )
    add_link_options(
      $<$<CONFIG:Debug>:-fprofile-instr-generate>
    )
endif()

include(FetchContent)

FetchContent_Declare(
  nlohmann_json
  GIT_REPOSITORY https://github.com/nlohmann/json.git
  GIT_TAG v3.11.3
)
FetchContent_MakeAvailable(nlohmann_json)

# (requires nlohmann/json)
FetchContent_Declare(
  json_schema_validator
  GIT_REPOSITORY https://github.com/pboettch/json-schema-validator.git
  GIT_TAG 2.3.0
)
FetchContent_MakeAvailable(json_schema_validator)

FetchContent_Declare(
  googletest
  URL https://github.com/google/googletest/archive/03597a01ee50ed33e9dfd640b249b4be3799d395.zip
)
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(googletest)

add_executable(scpsolver
    src/main.cpp
    src/server.cpp
    src/routes.cpp
    src/routes/RootHandler.cpp
    src/routes/CSPSolverHandler.cpp
    src/engine/CSPScheduler.cpp
    src/util/SchemaValidator.cpp
    lib/civetweb/src/CivetServer.cpp
)

target_include_directories(scpsolver PRIVATE ${CMAKE_SOURCE_DIR}/lib/civetweb/include)

set_target_properties(scpsolver PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/bin"
)

add_executable(scpsolver_test
    tests/main_test.cpp
    tests/routes_test.cpp
    src/server.cpp
    src/routes.cpp
    src/routes/RootHandler.cpp
    src/routes/CSPSolverHandler.cpp
    src/engine/CSPScheduler.cpp
    src/util/SchemaValidator.cpp
    lib/civetweb/src/CivetServer.cpp
)

target_include_directories(scpsolver_test PRIVATE
    ${CMAKE_BINARY_DIR}/_deps/googletest/googletest/include/gtest
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_SOURCE_DIR}/lib/civetweb/include
)

target_link_directories(scpsolver_test PRIVATE ${CMAKE_SOURCE_DIR}/lib/civetweb)

set_target_properties(scpsolver_test PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/bin"
)

if(APPLE)
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64|aarch64|arm")
        set(ORTOOLS_ROOT "${CMAKE_SOURCE_DIR}/lib/or-tools-9.14.6206/mac-arm")
    else()
        message(FATAL_ERROR "wip macOS architecture: ${CMAKE_SYSTEM_PROCESSOR}")
    endif()

    find_package(ortools REQUIRED PATHS ${ORTOOLS_ROOT}/lib/cmake/ortools NO_DEFAULT_PATH)
    target_link_libraries(scpsolver 
      PRIVATE 
      ortools::ortools 
      civetweb 
      Threads::Threads 
      dl    
      nlohmann_json::nlohmann_json
      nlohmann_json_schema_validator
    )
    target_link_directories(scpsolver PRIVATE ${CMAKE_SOURCE_DIR}/lib/civetweb)

    set_target_properties(scpsolver PROPERTIES
        BUILD_RPATH "/lib/civetweb"
        INSTALL_RPATH "/lib/civetweb"
        MACOSX_RPATH ON
    )

    target_link_libraries(scpsolver_test
      PRIVATE 
      GTest::gtest 
      GTest::gtest_main
      ortools::ortools  
      civetweb 
      curl
      Threads::Threads
      nlohmann_json::nlohmann_json
      nlohmann_json_schema_validator
    )

    if(COVERAGE AND (CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang"))
        target_compile_options(scpsolver_test PRIVATE 
          $<$<CONFIG:Debug>:-fprofile-instr-generate>
          $<$<CONFIG:Debug>:-fcoverage-mapping>
          $<$<CONFIG:Debug>:-O0>
        )
        target_link_options(scpsolver_test PRIVATE 
          $<$<CONFIG:Debug>:-fprofile-instr-generate>
        )
    endif()
else()
    target_link_libraries(scpsolver PRIVATE civetweb Threads::Threads dl)
endif()

enable_testing()
add_test(NAME AllTests COMMAND scpsolver_test)


find_package(Doxygen)
if(Doxygen_FOUND)
  set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in)
  set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

  configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)

  doxygen_add_docs(
    docs
    ${PROJECT_SOURCE_DIR}
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMENT "Generating API documentation with Doxygen"
    CONFIG_FILE ${DOXYGEN_OUT}
  )
endif()
